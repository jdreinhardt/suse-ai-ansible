---
# TODO: if suse_ai_install_rke2 is false need to verify that k8s cluster exists and kubectl present

# Install RKE2 Server
- block:
    - name: Get RKE2 install script
      ansible.builtin.get_url:
        url: https://get.rke2.io
        dest: /tmp/rke_install.sh
        mode: "a+x"

    - name: Install RKE2
      ansible.builtin.shell:
        cmd: /tmp/rke_install.sh
        creates: /var/lib/rancher/rke2/bin/kubectl
      become: true
  when:
    - suse_ai_install_rke2 | default(true)
    - inventory_hostname in control_plane_nodes

- block:
    - name: Start rke2-server service
      ansible.builtin.systemd_service:
        name: rke2-server
        state: started
        enabled: true
      become: true

    - name: Get internal IP address
      vars:
        command: "hostname -I | awk '{print $1}'"
      ansible.builtin.shell: "{{ command }}"
      register: ip_address_result
      changed_when: false

    # - name: Display the IP address
    #   debug:
    #     var: ip_address_result.stdout

    - name: Get rke2-server token
      ansible.builtin.shell:
        cmd: cat /var/lib/rancher/rke2/server/node-token
      register: rke2_server_token
      become: true
      changed_when: false

    # - name: Display Server Token
    #   debug:
    #     var: rke2_server_token

    - name: Download Helm command line tool
      ansible.builtin.uri:
        url: https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3
        return_content: true
      register: helm_installer

    - name: Install Helm
      ansible.builtin.command:
        cmd: bash
        stdin: "{{ helm_installer.content }}"
        creates: /usr/local/bin/helm
      environment:
        DESIRED_VERSION: "{{ helm_version | default('') }}"

    - name: "Copy kubectl to /usr/local/bin"
      ansible.builtin.copy:
        src: /var/lib/rancher/rke2/bin/kubectl
        dest: /usr/local/bin/kubectl
        remote_src: true
        mode: "+x"
      become: true

    - name: Ensure kube directory exists
      ansible.builtin.file:
        path: ~/.kube
        state: directory

    - name: Set kubeconfig for user
      ansible.builtin.copy:
        src: /etc/rancher/rke2/rke2.yaml
        dest: "{{ ansible_facts.user_dir }}/.kube/config"
        owner: "{{ ansible_user_uid }}"
        group: "{{ ansible_user_gid }}"
        remote_src: true
      become: true
  when:
    - suse_ai_install_rke2 | default(true)
    - inventory_hostname in primary_control_nodes

- block:
    - name: Ensure config directory exists
      ansible.builtin.file:
        path: /etc/rancher/rke2
        state: directory
      become: true

    - name: Set server configuration file
      ansible.builtin.template:
        src: templates/rke2-server-config.yaml.j2
        dest: /etc/rancher/rke2/config.yaml
        owner: root
        group: root
      become: true

    - name: Start rke2-server service
      ansible.builtin.systemd_service:
        name: rke2-server
        state: started
        enabled: true
      become: true
  when:
    - suse_ai_install_rke2 | default(true)
    - inventory_hostname in control_plane_nodes and inventory_hostname not in primary_control_nodes

- block:
    - name: Get RKE2 install script
      ansible.builtin.get_url:
        url: https://get.rke2.io
        dest: /tmp/rke_install.sh
        mode: "a+x"

    - name: Install RKE2
      ansible.builtin.shell:
        cmd: INSTALL_RKE2_TYPE="agent" /tmp/rke_install.sh
        creates: /etc/systemd/system/rke2-agent.service
      become: true

    - name: Ensure config directory exists
      ansible.builtin.file:
        path: /etc/rancher/rke2
        state: directory
      become: true

    - name: Set server configuration file
      ansible.builtin.template:
        src: templates/rke2-agent-config.yaml.j2
        dest: /etc/rancher/rke2/config.yaml
        owner: root
        group: root
      become: true

    - name: Start rke2-agent service
      ansible.builtin.systemd_service:
        name: rke2-agent
        state: started
        enabled: true
      become: true
  when:
    - suse_ai_install_rke2 | default(true)
    - inventory_hostname in worker_nodes

# Longhorn OS Support
- block:
    - name: Install Longhorn OS dependencies
      community.general.zypper:
        name:
          - open-iscsi
          - nfs-client
          - cryptsetup
          - device-mapper
        state: present
        update_cache: true
      become: true

    - name: Check if reboot required
      ansible.builtin.stat:
        path: /run/reboot-needed
      register: need_reboot

    - name: Check for reboot marker
      ansible.builtin.stat:
        path: /var/lib/suse-ai-longhorn-rebooted
      register: longhorn_reboot_marker
      when: ansible_facts.distribution == 'SL-Micro'

    - block:
        - name: Set Longhorn reboot marker
          ansible.builtin.file:
            path: /var/lib/suse-ai-longhorn-rebooted
            state: touch
          become: true
          when: ansible_facts.distribution == 'SL-Micro'

        - name: Reboot
          ansible.builtin.reboot:
          become: true

        # Need to allow Kubernetes to start back up before proceeding.
        - name: Wait for system to come back online after reboot
          ansible.builtin.wait_for_connection:
            timeout: 120
      when: >
        need_reboot.stat.exists or
        (ansible_facts.distribution == 'SL-Micro' and longhorn_reboot_marker.stat.exists == false)

    - name: Enable iscsid
      ansible.builtin.systemd_service:
        name: iscsid
        state: started
        enabled: true
      become: true

    - name: Add the iscsci_tcp module
      community.general.modprobe:
        name: iscsi_tcp
        state: present
      become: true

  when:
    - suse_ai_install_longhorn | default(true)
      or suse_ai_rancher_longhorn_support | default(true)

# Install Rancher
- block:
    - name: Install Rancher
      include_tasks: "{{ role_path }}/tasks/kubernetes/install_rancher.yml"
  when:
    - suse_ai_install_rancher | default(true)
    - inventory_hostname in primary_control_nodes

# Install Longhorn
- block:
    - name: Install Longhorn
      include_tasks: "{{ role_path }}/tasks/kubernetes/install_longhorn.yml"
  when:
    - suse_ai_install_longhorn | default(true)
    - inventory_hostname in primary_control_nodes
