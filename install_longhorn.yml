# Header Info
#

---
- hosts: all
  name: Install Longhorn
  vars_files:
    - vars.yml
  tasks:
    - debug:
        var: ansible_facts.os_family
    - debug:
        var: ansible_facts.distribution

    - block:
        - block:
            - name: Install dependecies
              community.general.zypper:
                name:
                  - open-iscsi
                  - nfs-client
                  - cryptsetup
                  - device-mapper
                state: present
                update_cache: true
              become: true

            - name: Check if reboot required
              stat:
                path: /run/reboot-needed
              register: need_reboot

            - block:
                - name: Reboot
                  ansible.builtin.reboot:
                  become: true

                # Need to allow Kubernetes to start back up before proceeding.
                - name: Wait for system to come back online after reboot
                  ansible.builtin.wait_for_connection:
                    timeout: 120
              when: need_reboot.stat.exists == True # or ansible_facts.distribution == 'SL-Micro'

            - name: Enable iscsid
              ansible.builtin.systemd_service:
                name: iscsid
                state: started
                enabled: true
              become: true

            - name: Add the iscsci_tcp module
              community.general.modprobe:
                name: iscsi_tcp
                state: present
              become: true

          when: ansible_facts.os_family == 'Suse'

      when: install.longhorn == true or rancher.longhornSupport == true

    - block:
        - name: Add Longhorn helm repo
          kubernetes.core.helm_repository:
            name: longhorn
            repo_url: "https://charts.longhorn.io"
          when: system == "rke2"

        - name: Install Longhorn
          kubernetes.core.helm:
            name: longhorn
            chart_ref: longhorn/longhorn
            release_namespace: longhorn-system
            create_namespace: true

      when: install.longhorn == true

- hosts: primary_node
  name: Install Longhorn
  vars_files:
    - vars.yml
  tasks:
    - block:
        - name: Check if longhorn is default StorageClass
          ansible.builtin.shell: |
            kubectl get storageclass longhorn -o jsonpath='{.metadata.annotations.storageclass\.kubernetes\.io/is-default-class}'
          register: longhorn_is_default_check
          changed_when: false
          ignore_errors: true

        - name: Set longhorn as default StorageClass
          ansible.builtin.shell: |
            kubectl patch storageclass longhorn -p '{"metadata": {"annotations":{"storageclass.kubernetes.io/is-default-class":"true"}}}'
          when: longhorn_is_default_check.stdout != "true"

      when: longhorn.default == true

    - block:
        - name: Verify if longhorn-xfs exists
          ansible.builtin.shell: |
            kubectl get storageclass longhorn-xfs -o name
          register: storageclass_check
          failed_when: false
          changed_when: false

        - name: Set fact if longhorn-xfs exists
          ansible.builtin.set_fact:
            longhorn_xfs_storageclass_exists: "{{ storageclass_check.stdout | length > 0 }}"

        - block:
            - name: Copy xfs resource config
              ansible.builtin.copy:
                src: k8s_config/longhorn-xfs.yml
                dest: /tmp/longhorn-xfs.yml

            - name: Apply longhorn-xfs config
              ansible.builtin.shell: |
                kubectl apply -f /tmp/longhorn-xfs.yml

          when: not longhorn_xfs_storageclass_exists

      when: longhorn.xfs == true
